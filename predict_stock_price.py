# -*- coding: utf-8 -*-
"""predict_stock_price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H8VuXkfQPw97hHR9H45-mIYDSTUi1Hvv
"""

import numpy as np
import pandas as pd
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import LSTM, Dense
import matplotlib.pyplot as plt

# Download stock data from Yahoo Finance
ticker = 'AAPL'  # Replace with the stock ticker of your choice
start_date = '2020-01-01'  # Replace with your desired start date
end_date = '2024-01-01'    # Replace with your desired end date
df = yf.download(ticker, start=start_date, end=end_date)

# Use the 'Close' prices for prediction
data = df['Close'].values.reshape(-1, 1)

# Scale the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Create training and test datasets
def create_dataset(data, time_step=1):
    X, y = [], []
    for i in range(len(data) - time_step - 1):
        X.append(data[i:(i + time_step), 0])
        y.append(data[i + time_step, 0])
    return np.array(X), np.array(y)

time_step = 60  # Number of previous days to consider for prediction
X, y = create_dataset(scaled_data, time_step)
X = X.reshape(X.shape[0], X.shape[1], 1)

# Split data into training and test sets
split = int(len(X) * 0.8)
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# Build the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(time_step, 1)))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=20, batch_size=32)

# Make predictions
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)
y_test = scaler.inverse_transform(y_test.reshape(-1, 1))

# Evaluate the model
mse = mean_squared_error(y_test, predictions)
print(f'Mean Squared Error: {mse}')

# Plot results
plt.figure(figsize=(14, 7))
plt.plot(df.index[-len(y_test):], y_test, color='blue', label='Actual Price')
plt.plot(df.index[-len(y_test):], predictions, color='red', label='Predicted Price')
plt.xlabel('Date')
plt.ylabel('Price')
plt.title(f'{ticker} Price Prediction')
plt.legend()
plt.show()